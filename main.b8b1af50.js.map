{"version":3,"sources":["scripts/main.js"],"names":["Cell","cellEl","cellClass","x","y","$el","value","mergeValue","innerText","className","classList","add","newCell","Game","messageClass","messageHiddenClass","state","cells","$score","document","querySelector","$toggleBtn","$messages","querySelectorAll","$rows","initCells","initEvents","forEach","row","rowIndex","cell","cellIndex","push","addEventListener","e","preventDefault","restart","handleKeyInput","bind","reduce","group","emptyCells","filter","Math","floor","random","length","message","contains","remove","current","Number","setValue","changeScore","groupCells","some","index","canMerge","groupCellsByColumn","map","col","reverse","groupCellsByRow","canMoveGroup","newValue","changeState","includes","i","j","cellWithValue","targetCell","mergeCells","getRandomEmptyCell","canMove","key","moveCells","clearGrid","game","init"],"mappings":"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","file":"main.b8b1af50.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nclass Cell {\n  constructor(cellEl, cellClass, x, y) {\n    this.$el = cellEl;\n\n    this.x = x;\n    this.y = y;\n    this.cellClass = cellClass;\n    this.value = null;\n    this.mergeValue = null;\n  }\n\n  setValue(value, mergeValue = null) {\n    this.value = value;\n    this.mergeValue = mergeValue;\n    this.$el.innerText = this.value;\n    this.$el.className = this.cellClass;\n\n    if (this.value !== null) {\n      this.$el.classList.add(`${this.cellClass}--${this.value}`);\n    }\n  }\n\n  canMerge(newCell) {\n    return !this.value || (!this.mergeValue && this.value === newCell.value);\n  }\n}\n\nclass Game {\n  constructor() {\n    this.messageClass = 'message';\n    this.messageHiddenClass = 'hidden';\n    this.cellClass = 'field-cell';\n    this.state = 'start';\n    this.cells = [];\n\n    this.$score = document.querySelector('.game-score');\n    this.$toggleBtn = document.querySelector('.button');\n    this.$messages = document.querySelectorAll(`.${this.messageClass}`);\n    this.$rows = document.querySelectorAll('.field-row');\n  }\n\n  init() {\n    this.initCells();\n    this.initEvents();\n  }\n  initCells() {\n    this.$rows.forEach((row, rowIndex) => {\n      const rowCells = row.querySelectorAll(`.${this.cellClass}`);\n\n      rowCells.forEach((cell, cellIndex) => {\n        this.cells.push(new Cell(cell, this.cellClass, cellIndex, rowIndex));\n      });\n    });\n  }\n  initEvents() {\n    this.$toggleBtn.addEventListener('click', e => {\n      e.preventDefault();\n\n      this.restart();\n    });\n    document.addEventListener('keydown', this.handleKeyInput.bind(this));\n  }\n  groupCellsByColumn() {\n    return this.cells.reduce((group, cell) => {\n      group[cell.x] = group[cell.x] || [];\n      group[cell.x][cell.y] = cell;\n\n      return group;\n    }, []);\n  }\n  groupCellsByRow() {\n    return this.cells.reduce((group, cell) => {\n      group[cell.y] = group[cell.y] || [];\n      group[cell.y][cell.x] = cell;\n\n      return group;\n    }, []);\n  }\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter(cell => !cell.value);\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n  changeState(state = null) {\n    this.state = state;\n\n    this.$messages.forEach(message => {\n      if (message.classList.contains(`${this.messageClass}-${this.state}`)) {\n        message.classList.remove(this.messageHiddenClass);\n      } else {\n        message.classList.add(this.messageHiddenClass);\n      }\n    });\n\n    if (this.state !== 'start') {\n      this.$toggleBtn.classList.remove('start');\n      this.$toggleBtn.classList.add('restart');\n      this.$toggleBtn.innerText = 'Restart';\n    }\n  }\n  changeScore(value = null) {\n    const current = Number(this.$score.innerText);\n\n    this.$score.innerText = value ? current + value : 0;\n  }\n  clearGrid() {\n    this.cells.forEach(cell => cell.setValue(null));\n    this.changeScore();\n  }\n  canMoveGroup(groupCells) {\n    return groupCells.some(group => {\n      return group.some((cell, index) => {\n        if (index === 0) {\n          return false;\n        }\n\n        if (!cell.value) {\n          return false;\n        }\n\n        const targetCell = group[index - 1];\n\n        return targetCell.canMerge(cell);\n      });\n    });\n  }\n  canMove() {\n    return [\n      this.groupCellsByColumn(),\n      this.groupCellsByColumn().map(col => col.reverse()),\n      this.groupCellsByRow(),\n      this.groupCellsByRow().map(col => col.reverse()),\n    ].some(this.canMoveGroup);\n  }\n  mergeCells() {\n    this.cells.forEach(cell => {\n      if (cell.mergeValue) {\n        const newValue = cell.value + cell.mergeValue;\n\n        cell.setValue(newValue);\n        cell.mergeValue = null;\n\n        this.changeScore(newValue);\n\n        if (newValue >= 2048) {\n          this.changeState('win');\n        }\n      }\n    });\n  }\n  moveCells(groupCells) {\n    if (this.state === 'start') {\n      return this.restart();\n    } else if (['win', 'lose'].includes(this.state)) {\n      return;\n    }\n\n    if (!this.canMoveGroup(groupCells)) {\n      return;\n    }\n\n    groupCells.forEach(group => {\n      for (let i = 1; i < group.length; i++) {\n        if (!group[i].value) {\n          continue;\n        }\n\n        const cellWithValue = group[i];\n        let targetCell;\n        let j = i - 1;\n\n        while (j >= 0 && group[j].canMerge(cellWithValue)) {\n          targetCell = group[j];\n          j--;\n        }\n\n        if (!targetCell) {\n          continue;\n        }\n\n        targetCell.setValue(cellWithValue.value, targetCell.value);\n        cellWithValue.setValue(null);\n      }\n    });\n\n    this.mergeCells();\n    this.getRandomEmptyCell().setValue(Math.random() > 0.5 ? 2 : 4);\n\n    if (!this.canMove()) {\n      this.changeState('lose');\n    }\n  }\n  handleKeyInput(e) {\n    switch (e.key) {\n      case 'ArrowUp':\n        this.moveCells(this.groupCellsByColumn());\n        break;\n      case 'ArrowDown':\n        this.moveCells(this.groupCellsByColumn().map(col => col.reverse()));\n        break;\n      case 'ArrowLeft':\n        this.moveCells(this.groupCellsByRow());\n        break;\n      case 'ArrowRight':\n        this.moveCells(this.groupCellsByRow().map(col => col.reverse()));\n        break;\n      default:\n        break;\n    }\n  }\n  restart() {\n    this.clearGrid();\n    this.changeState();\n    this.getRandomEmptyCell().setValue(Math.random() > 0.5 ? 2 : 4);\n    this.getRandomEmptyCell().setValue(Math.random() > 0.5 ? 2 : 4);\n  }\n}\n\nconst game = new Game();\n\ngame.init();\n"]}